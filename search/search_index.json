{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Auto-GPT Welcome to Auto-GPT. Please follow the Installation guide to get started. It is recommended to use a virtual machine for tasks that require high security measures to prevent any potential harm to the main computer's system and data.","title":"Home"},{"location":"#auto-gpt","text":"Welcome to Auto-GPT. Please follow the Installation guide to get started. It is recommended to use a virtual machine for tasks that require high security measures to prevent any potential harm to the main computer's system and data.","title":"Auto-GPT"},{"location":"installation/","text":"\ud83d\udcbe Installation \u26a0\ufe0f OpenAI API Keys Configuration Get your OpenAI API key from: https://platform.openai.com/account/api-keys. To use OpenAI API key for Auto-GPT, you NEED to have billing set up (AKA paid account). You can set up paid account at https://platform.openai.com/account/billing/overview. Important: It's highly recommended that you track your usage on the Usage page . You can also set limits on how much you spend on the Usage limits page . PLEASE ENSURE YOU HAVE DONE THIS STEP BEFORE PROCEEDING. OTHERWISE, NOTHING WILL WORK! General setup Make sure you have one of the environments listed under requirements set up. To execute the following commands, open a CMD, Bash, or Powershell window by navigating to a folder on your computer and typing CMD in the folder path at the top, then press enter. Clone the repository using Git, or download the latest stable release ( Source code (zip) , at the bottom of the page). shell git clone -b stable https://github.com/Significant-Gravitas/Auto-GPT.git Navigate to the directory where you downloaded the repository. shell cd Auto-GPT Configure Auto-GPT: Find the file named .env.template in the main Auto-GPT folder. This file may be hidden by default in some operating systems due to the dot prefix. To reveal hidden files, follow the instructions for your specific operating system (e.g., in Windows, click on the \"View\" tab in File Explorer and check the \"Hidden items\" box; in macOS, press Cmd + Shift + .). Create a copy of this file and call it .env by removing the template extension. The easiest way is to do this in a command prompt/terminal window cp .env.template .env . Open the .env file in a text editor. Find the line that says OPENAI_API_KEY= . After the \"=\" , enter your unique OpenAI API Key (without any quotes or spaces). Enter any other API keys or Tokens for services you would like to use. To activate and adjust a setting, remove the # prefix. Save and close the .env file. You have now configured Auto-GPT. Notes: - See OpenAI API Keys Configuration to get your OpenAI API key. - Get your ElevenLabs API key from: https://elevenlabs.io. You can view your xi-api-key using the \"Profile\" tab on the website. - If you want to use GPT on an Azure instance, set USE_AZURE to True and then follow these steps: - Rename azure.yaml.template to azure.yaml and provide the relevant azure_api_base , azure_api_version and all the deployment IDs for the relevant models in the azure_model_map section: - fast_llm_model_deployment_id - your gpt-3.5-turbo or gpt-4 deployment ID - smart_llm_model_deployment_id - your gpt-4 deployment ID - embedding_model_deployment_id - your text-embedding-ada-002 v2 deployment ID - Please specify all of these values as double-quoted strings ``` shell # Replace string in angled brackets (<>) to your own ID azure_model_map: fast_llm_model_deployment_id: \"<my-fast-llm-deployment-id>\" ... ``` - Details can be found here: https://pypi.org/project/openai/ in the `Microsoft Azure Endpoints` section and here: https://learn.microsoft.com/en-us/azure/cognitive-services/openai/tutorials/embeddings?tabs=command-line for the embedding model. - If you're on Windows you may need to install https://learn.microsoft.com/en-us/cpp/windows/latest-supported-vc-redist?view=msvc-170 Follow the further instructions for running Auto-GPT with Docker ( recommended ), or Docker-less Run with Docker Easiest is to run with docker-compose : docker-compose build auto-gpt docker-compose run --rm auto-gpt By default, this will also start and attach a Redis memory backend. For related settings, see Memory > Redis setup . You can also build and run it with \"vanilla\" docker commands: docker build -t auto-gpt . docker run -it --env-file=.env -v $PWD:/app auto-gpt You can pass extra arguments, for instance, running with --gpt3only and --continuous mode: docker-compose run --rm auto-gpt --gpt3only --continuous docker run -it --env-file=.env -v $PWD:/app --rm auto-gpt --gpt3only --continuous Alternatively, you can pull the latest release directly from Docker Hub and run that: docker run -it --env OPENAI_API_KEY='your-key-here' --rm significantgravitas/auto-gpt Or with ai_settings.yml presets mounted: docker run -it --env OPENAI_API_KEY='your-key-here' -v $PWD/ai_settings.yaml:/app/ai_settings.yaml --rm significantgravitas/auto-gpt Run Docker-less Simply run ./run.sh (Linux/macOS) or .\\run.bat (Windows) in your terminal. Run with Dev Container Install the Remote - Containers extension in VS Code. Open command palette and type in Dev Containers: Open Folder in Container. Run ./run.sh .","title":"Installation"},{"location":"installation/#installation","text":"","title":"\ud83d\udcbe Installation"},{"location":"installation/#openai-api-keys-configuration","text":"Get your OpenAI API key from: https://platform.openai.com/account/api-keys. To use OpenAI API key for Auto-GPT, you NEED to have billing set up (AKA paid account). You can set up paid account at https://platform.openai.com/account/billing/overview. Important: It's highly recommended that you track your usage on the Usage page . You can also set limits on how much you spend on the Usage limits page . PLEASE ENSURE YOU HAVE DONE THIS STEP BEFORE PROCEEDING. OTHERWISE, NOTHING WILL WORK!","title":"\u26a0\ufe0f OpenAI API Keys Configuration"},{"location":"installation/#general-setup","text":"Make sure you have one of the environments listed under requirements set up. To execute the following commands, open a CMD, Bash, or Powershell window by navigating to a folder on your computer and typing CMD in the folder path at the top, then press enter. Clone the repository using Git, or download the latest stable release ( Source code (zip) , at the bottom of the page). shell git clone -b stable https://github.com/Significant-Gravitas/Auto-GPT.git Navigate to the directory where you downloaded the repository. shell cd Auto-GPT Configure Auto-GPT: Find the file named .env.template in the main Auto-GPT folder. This file may be hidden by default in some operating systems due to the dot prefix. To reveal hidden files, follow the instructions for your specific operating system (e.g., in Windows, click on the \"View\" tab in File Explorer and check the \"Hidden items\" box; in macOS, press Cmd + Shift + .). Create a copy of this file and call it .env by removing the template extension. The easiest way is to do this in a command prompt/terminal window cp .env.template .env . Open the .env file in a text editor. Find the line that says OPENAI_API_KEY= . After the \"=\" , enter your unique OpenAI API Key (without any quotes or spaces). Enter any other API keys or Tokens for services you would like to use. To activate and adjust a setting, remove the # prefix. Save and close the .env file. You have now configured Auto-GPT. Notes: - See OpenAI API Keys Configuration to get your OpenAI API key. - Get your ElevenLabs API key from: https://elevenlabs.io. You can view your xi-api-key using the \"Profile\" tab on the website. - If you want to use GPT on an Azure instance, set USE_AZURE to True and then follow these steps: - Rename azure.yaml.template to azure.yaml and provide the relevant azure_api_base , azure_api_version and all the deployment IDs for the relevant models in the azure_model_map section: - fast_llm_model_deployment_id - your gpt-3.5-turbo or gpt-4 deployment ID - smart_llm_model_deployment_id - your gpt-4 deployment ID - embedding_model_deployment_id - your text-embedding-ada-002 v2 deployment ID - Please specify all of these values as double-quoted strings ``` shell # Replace string in angled brackets (<>) to your own ID azure_model_map: fast_llm_model_deployment_id: \"<my-fast-llm-deployment-id>\" ... ``` - Details can be found here: https://pypi.org/project/openai/ in the `Microsoft Azure Endpoints` section and here: https://learn.microsoft.com/en-us/azure/cognitive-services/openai/tutorials/embeddings?tabs=command-line for the embedding model. - If you're on Windows you may need to install https://learn.microsoft.com/en-us/cpp/windows/latest-supported-vc-redist?view=msvc-170 Follow the further instructions for running Auto-GPT with Docker ( recommended ), or Docker-less","title":"General setup"},{"location":"installation/#run-with-docker","text":"Easiest is to run with docker-compose : docker-compose build auto-gpt docker-compose run --rm auto-gpt By default, this will also start and attach a Redis memory backend. For related settings, see Memory > Redis setup . You can also build and run it with \"vanilla\" docker commands: docker build -t auto-gpt . docker run -it --env-file=.env -v $PWD:/app auto-gpt You can pass extra arguments, for instance, running with --gpt3only and --continuous mode: docker-compose run --rm auto-gpt --gpt3only --continuous docker run -it --env-file=.env -v $PWD:/app --rm auto-gpt --gpt3only --continuous Alternatively, you can pull the latest release directly from Docker Hub and run that: docker run -it --env OPENAI_API_KEY='your-key-here' --rm significantgravitas/auto-gpt Or with ai_settings.yml presets mounted: docker run -it --env OPENAI_API_KEY='your-key-here' -v $PWD/ai_settings.yaml:/app/ai_settings.yaml --rm significantgravitas/auto-gpt","title":"Run with Docker"},{"location":"installation/#run-docker-less","text":"Simply run ./run.sh (Linux/macOS) or .\\run.bat (Windows) in your terminal.","title":"Run Docker-less"},{"location":"installation/#run-with-dev-container","text":"Install the Remote - Containers extension in VS Code. Open command palette and type in Dev Containers: Open Folder in Container. Run ./run.sh .","title":"Run with Dev Container"},{"location":"plugins/","text":"Plugins \u26a0\ufe0f\ud83d\udc80 WARNING \ud83d\udc80\u26a0\ufe0f: Review the code of any plugin you use thoroughly, as plugins can execute any Python code, potentially leading to malicious activities, such as stealing your API keys. See our Plugins Repo for more info on how to install all the amazing plugins the community has built! Alternatively, developers can use the Auto-GPT Plugin Template as a starting point for creating your own plugins.","title":"Plugins"},{"location":"plugins/#plugins","text":"\u26a0\ufe0f\ud83d\udc80 WARNING \ud83d\udc80\u26a0\ufe0f: Review the code of any plugin you use thoroughly, as plugins can execute any Python code, potentially leading to malicious activities, such as stealing your API keys. See our Plugins Repo for more info on how to install all the amazing plugins the community has built! Alternatively, developers can use the Auto-GPT Plugin Template as a starting point for creating your own plugins.","title":"Plugins"},{"location":"testing/","text":"Run tests To run all tests, run the following command: pytest To run just without integration tests: pytest --without-integration To run just without slow integration tests: pytest --without-slow-integration To run tests and see coverage, run the following command: pytest --cov=autogpt --without-integration --without-slow-integration Run linter This project uses flake8 for linting. We currently use the following rules: E303,W293,W291,W292,E305,E231,E302 . See the flake8 rules for more information. To run the linter, run the following command: flake8 autogpt/ tests/ # Or, if you want to run flake8 with the same configuration as the CI: flake8 autogpt/ tests/ --select E303,W293,W291,W292,E305,E231,E302","title":"Testing"},{"location":"testing/#run-tests","text":"To run all tests, run the following command: pytest To run just without integration tests: pytest --without-integration To run just without slow integration tests: pytest --without-slow-integration To run tests and see coverage, run the following command: pytest --cov=autogpt --without-integration --without-slow-integration","title":"Run tests"},{"location":"testing/#run-linter","text":"This project uses flake8 for linting. We currently use the following rules: E303,W293,W291,W292,E305,E231,E302 . See the flake8 rules for more information. To run the linter, run the following command: flake8 autogpt/ tests/ # Or, if you want to run flake8 with the same configuration as the CI: flake8 autogpt/ tests/ --select E303,W293,W291,W292,E305,E231,E302","title":"Run linter"},{"location":"usage/","text":"Usage Open a terminal and run the startup script: On Linux/MacOS: shell ./run.sh On Windows: shell .\\run.bat Using Docker: shell docker-compose run --rm auto-gpt Running with --help lists all the possible command line arguments you can pass: ``` shell ./run.sh --help or with docker docker-compose run --rm auto-gpt --help ``` After each response from Auto-GPT, choose from the options to authorize command(s), exit the program, or provide feedback to the AI. Authorize a single command by entering y Authorize a series of N continuous commands by entering y -N . For example, entering y -10 would run 10 automatic iterations. Enter any free text to give feedback to Auto-GPT. Exit the program by entering n Command Line Arguments Here are some common arguments you can use when running Auto-GPT: Replace anything in angled brackets (<>) to a value you want to specify View all available command line arguments shell python -m autogpt --help Run Auto-GPT with a different AI Settings file shell python -m autogpt --ai-settings <filename> Specify a memory backend shell python -m autogpt --use-memory <memory-backend> NOTE : There are shorthands for some of these flags, for example -m for --use-memory . Use python -m autogpt --help for more information Speak Mode Enter this command to use TTS (Text-to-Speech) for Auto-GPT python -m autogpt --speak \ud83d\udc80 Continuous Mode \u26a0\ufe0f Run the AI without user authorization, 100% automated. Continuous mode is NOT recommended. It is potentially dangerous and may cause your AI to run forever or carry out actions you would not usually authorize. Use at your own risk. Run the autogpt python module in your terminal: shell python -m autogpt --continuous To exit the program, press Ctrl + C \u267b\ufe0f Self-Feedback Mode \u26a0\ufe0f Running Self-Feedback will INCREASE token use and thus cost more. This feature enables the agent to provide self-feedback by verifying its own actions and checking if they align with its current goals. If not, it will provide better feedback for the next loop. To enable this feature for the current loop, input S into the input field. GPT3.5 ONLY Mode If you don't have access to the GPT4 api, this mode will allow you to use Auto-GPT! python -m autogpt --gpt3only GPT4 ONLY Mode If you do have access to the GPT4 api, this mode will allow you to use Auto-GPT solely using the GPT-4 API for increased intelligence (and cost!) python -m autogpt --gpt4only Logs Activity and error logs are located in the ./output/logs To print out debug logs: python -m autogpt --debug","title":"Usage"},{"location":"usage/#usage","text":"Open a terminal and run the startup script: On Linux/MacOS: shell ./run.sh On Windows: shell .\\run.bat Using Docker: shell docker-compose run --rm auto-gpt Running with --help lists all the possible command line arguments you can pass: ``` shell ./run.sh --help","title":"Usage"},{"location":"usage/#or-with-docker","text":"docker-compose run --rm auto-gpt --help ``` After each response from Auto-GPT, choose from the options to authorize command(s), exit the program, or provide feedback to the AI. Authorize a single command by entering y Authorize a series of N continuous commands by entering y -N . For example, entering y -10 would run 10 automatic iterations. Enter any free text to give feedback to Auto-GPT. Exit the program by entering n","title":"or with docker"},{"location":"usage/#command-line-arguments","text":"Here are some common arguments you can use when running Auto-GPT: Replace anything in angled brackets (<>) to a value you want to specify View all available command line arguments shell python -m autogpt --help Run Auto-GPT with a different AI Settings file shell python -m autogpt --ai-settings <filename> Specify a memory backend shell python -m autogpt --use-memory <memory-backend> NOTE : There are shorthands for some of these flags, for example -m for --use-memory . Use python -m autogpt --help for more information","title":"Command Line Arguments"},{"location":"usage/#speak-mode","text":"Enter this command to use TTS (Text-to-Speech) for Auto-GPT python -m autogpt --speak","title":"Speak Mode"},{"location":"usage/#continuous-mode","text":"Run the AI without user authorization, 100% automated. Continuous mode is NOT recommended. It is potentially dangerous and may cause your AI to run forever or carry out actions you would not usually authorize. Use at your own risk. Run the autogpt python module in your terminal: shell python -m autogpt --continuous To exit the program, press Ctrl + C","title":"\ud83d\udc80 Continuous Mode \u26a0\ufe0f"},{"location":"usage/#self-feedback-mode","text":"Running Self-Feedback will INCREASE token use and thus cost more. This feature enables the agent to provide self-feedback by verifying its own actions and checking if they align with its current goals. If not, it will provide better feedback for the next loop. To enable this feature for the current loop, input S into the input field.","title":"\u267b\ufe0f Self-Feedback Mode \u26a0\ufe0f"},{"location":"usage/#gpt35-only-mode","text":"If you don't have access to the GPT4 api, this mode will allow you to use Auto-GPT! python -m autogpt --gpt3only","title":"GPT3.5 ONLY Mode"},{"location":"usage/#gpt4-only-mode","text":"If you do have access to the GPT4 api, this mode will allow you to use Auto-GPT solely using the GPT-4 API for increased intelligence (and cost!) python -m autogpt --gpt4only","title":"GPT4 ONLY Mode"},{"location":"usage/#logs","text":"Activity and error logs are located in the ./output/logs To print out debug logs: python -m autogpt --debug","title":"Logs"},{"location":"configuration/imagegen/","text":"\ud83d\uddbc Image Generation By default, Auto-GPT uses DALL-e for image generation. To use Stable Diffusion, a Hugging Face API Token is required. Once you have a token, set these variables in your .env : IMAGE_PROVIDER=huggingface HUGGINGFACE_API_TOKEN=YOUR_HUGGINGFACE_API_TOKEN Selenium sudo Xvfb :10 -ac -screen 0 1024x768x24 & DISPLAY=:10 <YOUR_CLIENT>","title":"Image Generation"},{"location":"configuration/imagegen/#image-generation","text":"By default, Auto-GPT uses DALL-e for image generation. To use Stable Diffusion, a Hugging Face API Token is required. Once you have a token, set these variables in your .env : IMAGE_PROVIDER=huggingface HUGGINGFACE_API_TOKEN=YOUR_HUGGINGFACE_API_TOKEN","title":"\ud83d\uddbc Image Generation"},{"location":"configuration/imagegen/#selenium","text":"sudo Xvfb :10 -ac -screen 0 1024x768x24 & DISPLAY=:10 <YOUR_CLIENT>","title":"Selenium"},{"location":"configuration/memory/","text":"Setting Your Cache Type By default, Auto-GPT is going to use LocalCache instead of redis or Pinecone. To switch to either, change the MEMORY_BACKEND env variable to the value that you want: local (default) uses a local JSON cache file pinecone uses the Pinecone.io account you configured in your ENV settings redis will use the redis cache that you configured milvus will use the milvus cache that you configured weaviate will use the weaviate cache that you configured Memory Backend Setup Links to memory backends Pinecone Milvus \u2013 self-hosted , or managed with Zilliz Cloud Redis Weaviate Redis Setup CAUTION \\ This is not intended to be publicly accessible and lacks security measures. Therefore, avoid exposing Redis to the internet without a password or at all 1. Install docker (or Docker Desktop on Windows). 2. Launch Redis container. docker run -d --name redis-stack-server -p 6379:6379 redis/redis-stack-server:latest See https://hub.docker.com/r/redis/redis-stack-server for setting a password and additional configuration. Set the following settings in .env . > Replace PASSWORD in angled brackets (<>) MEMORY_BACKEND=redis REDIS_HOST=localhost REDIS_PORT=6379 REDIS_PASSWORD=<PASSWORD> You can optionally set `WIPE_REDIS_ON_START=False` to persist memory stored in Redis. You can specify the memory index for redis using the following: MEMORY_INDEX=<WHATEVER> \ud83c\udf32 Pinecone API Key Setup Pinecone lets you store vast amounts of vector-based memory, allowing the agent to load only relevant memories at any given time. Go to pinecone and make an account if you don't already have one. Choose the Starter plan to avoid being charged. Find your API key and region under the default project in the left sidebar. In the .env file set: - PINECONE_API_KEY - PINECONE_ENV (example: \"us-east4-gcp\" ) - MEMORY_BACKEND=pinecone Alternatively, you can set them from the command line (advanced): For Windows Users: setx PINECONE_API_KEY \"<YOUR_PINECONE_API_KEY>\" setx PINECONE_ENV \"<YOUR_PINECONE_REGION>\" # e.g: \"us-east4-gcp\" setx MEMORY_BACKEND \"pinecone\" For macOS and Linux users: export PINECONE_API_KEY=\"<YOUR_PINECONE_API_KEY>\" export PINECONE_ENV=\"<YOUR_PINECONE_REGION>\" # e.g: \"us-east4-gcp\" export MEMORY_BACKEND=\"pinecone\" Milvus Setup Milvus is an open-source, highly scalable vector database to store huge amounts of vector-based memory and provide fast relevant search. And it can be quickly deployed by docker locally or as a cloud service provided by Zilliz Cloud . Deploy your Milvus service, either locally using docker or with a managed Zilliz Cloud database. Install and deploy Milvus locally Set up a managed Zilliz Cloud database (click to expand) Go to Zilliz Cloud and sign up if you don't already have account. In the Databases tab, create a new database. Remember your username and password Wait until the database status is changed to RUNNING. In the Database detail tab of the database you have created, the public cloud endpoint, such as: https://xxx-xxxx.xxxx.xxxx.zillizcloud.com:443 . Run pip3 install pymilvus to install the required client library. Make sure your PyMilvus version and Milvus version are compatible to avoid issues. See also the PyMilvus installation instructions . Update .env MEMORY_BACKEND=milvus One of: MILVUS_ADDR=host:ip (for local instance) MILVUS_ADDR=https://xxx-xxxx.xxxx.xxxx.zillizcloud.com:443 (for Zilliz Cloud) The following settings are optional : - Set MILVUS_USERNAME='username-of-your-milvus-instance' - Set MILVUS_PASSWORD='password-of-your-milvus-instance' - Set MILVUS_SECURE=True to use a secure connection. Only use if your Milvus instance has TLS enabled. Setting MILVUS_ADDR to a https:// URL will override this setting. - Set MILVUS_COLLECTION if you want to change the collection name to use in Milvus. Defaults to autogpt . Weaviate Setup Weaviate is an open-source vector database. It allows to store data objects and vector embeddings from ML-models and scales seamlessly to billion of data objects. An instance of Weaviate can be created locally (using Docker), on Kubernetes or using Weaviate Cloud Services . Although still experimental, Embedded Weaviate is supported which allows the Auto-GPT process itself to start a Weaviate instance. To enable it, set USE_WEAVIATE_EMBEDDED to True and make sure you pip install \"weaviate-client>=3.15.4\" . Install the Weaviate client Install the Weaviate client before usage. $ pip install weaviate-client Setting up environment variables In your .env file set the following: MEMORY_BACKEND=weaviate WEAVIATE_HOST=\"127.0.0.1\" # the IP or domain of the running Weaviate instance WEAVIATE_PORT=\"8080\" WEAVIATE_PROTOCOL=\"http\" WEAVIATE_USERNAME=\"your username\" WEAVIATE_PASSWORD=\"your password\" WEAVIATE_API_KEY=\"your weaviate API key if you have one\" WEAVIATE_EMBEDDED_PATH=\"/home/me/.local/share/weaviate\" # this is optional and indicates where the data should be persisted when running an embedded instance USE_WEAVIATE_EMBEDDED=False # set to True to run Embedded Weaviate MEMORY_INDEX=\"Autogpt\" # name of the index to create for the application View Memory Usage View memory usage by using the --debug flag :) \ud83e\udde0 Memory pre-seeding Memory pre-seeding allows you to ingest files into memory and pre-seed it before running Auto-GPT. # python data_ingestion.py -h usage: data_ingestion.py [-h] (--file FILE | --dir DIR) [--init] [--overlap OVERLAP] [--max_length MAX_LENGTH] Ingest a file or a directory with multiple files into memory. Make sure to set your .env before running this script. options: -h, --help show this help message and exit --file FILE The file to ingest. --dir DIR The directory containing the files to ingest. --init Init the memory and wipe its content (default: False) --overlap OVERLAP The overlap size between chunks when ingesting files (default: 200) --max_length MAX_LENGTH The max_length of each chunk when ingesting files (default: 4000) # python data_ingestion.py --dir DataFolder --init --overlap 100 --max_length 2000 In the example above, the script initializes the memory, ingests all files within the Auto-Gpt/autogpt/auto_gpt_workspace/DataFolder directory into memory with an overlap between chunks of 100 and a maximum length of each chunk of 2000. Note that you can also use the --file argument to ingest a single file into memory and that data_ingestion.py will only ingest files within the /auto_gpt_workspace directory. The DIR path is relative to the auto_gpt_workspace directory, so python data_ingestion.py --dir . --init will ingest everything in auto_gpt_workspace directory. You can adjust the max_length and overlap parameters to fine-tune the way the documents are presented to the AI when it \"recall\" that memory: - Adjusting the overlap value allows the AI to access more contextual information from each chunk when recalling information, but will result in more chunks being created and therefore increase memory backend usage and OpenAI API requests. - Reducing the max_length value will create more chunks, which can save prompt tokens by allowing for more message history in the context, but will also increase the number of chunks. - Increasing the max_length value will provide the AI with more contextual information from each chunk, reducing the number of chunks created and saving on OpenAI API requests. However, this may also use more prompt tokens and decrease the overall context available to the AI. Memory pre-seeding is a technique for improving AI accuracy by ingesting relevant data into its memory. Chunks of data are split and added to memory, allowing the AI to access them quickly and generate more accurate responses. It's useful for large datasets or when specific information needs to be accessed quickly. Examples include ingesting API or GitHub documentation before running Auto-GPT. \u26a0\ufe0f If you use Redis as your memory, make sure to run Auto-GPT with the WIPE_REDIS_ON_START=False in your .env file. \u26a0\ufe0fFor other memory backends, we currently forcefully wipe the memory when starting Auto-GPT. To ingest data with those memory backends, you can call the data_ingestion.py script anytime during an Auto-GPT run. Memories will be available to the AI immediately as they are ingested, even if ingested while Auto-GPT is running.","title":"Memory"},{"location":"configuration/memory/#setting-your-cache-type","text":"By default, Auto-GPT is going to use LocalCache instead of redis or Pinecone. To switch to either, change the MEMORY_BACKEND env variable to the value that you want: local (default) uses a local JSON cache file pinecone uses the Pinecone.io account you configured in your ENV settings redis will use the redis cache that you configured milvus will use the milvus cache that you configured weaviate will use the weaviate cache that you configured","title":"Setting Your Cache Type"},{"location":"configuration/memory/#memory-backend-setup","text":"Links to memory backends Pinecone Milvus \u2013 self-hosted , or managed with Zilliz Cloud Redis Weaviate","title":"Memory Backend Setup"},{"location":"configuration/memory/#redis-setup","text":"CAUTION \\ This is not intended to be publicly accessible and lacks security measures. Therefore, avoid exposing Redis to the internet without a password or at all 1. Install docker (or Docker Desktop on Windows). 2. Launch Redis container. docker run -d --name redis-stack-server -p 6379:6379 redis/redis-stack-server:latest See https://hub.docker.com/r/redis/redis-stack-server for setting a password and additional configuration. Set the following settings in .env . > Replace PASSWORD in angled brackets (<>) MEMORY_BACKEND=redis REDIS_HOST=localhost REDIS_PORT=6379 REDIS_PASSWORD=<PASSWORD> You can optionally set `WIPE_REDIS_ON_START=False` to persist memory stored in Redis. You can specify the memory index for redis using the following: MEMORY_INDEX=<WHATEVER>","title":"Redis Setup"},{"location":"configuration/memory/#pinecone-api-key-setup","text":"Pinecone lets you store vast amounts of vector-based memory, allowing the agent to load only relevant memories at any given time. Go to pinecone and make an account if you don't already have one. Choose the Starter plan to avoid being charged. Find your API key and region under the default project in the left sidebar. In the .env file set: - PINECONE_API_KEY - PINECONE_ENV (example: \"us-east4-gcp\" ) - MEMORY_BACKEND=pinecone Alternatively, you can set them from the command line (advanced): For Windows Users: setx PINECONE_API_KEY \"<YOUR_PINECONE_API_KEY>\" setx PINECONE_ENV \"<YOUR_PINECONE_REGION>\" # e.g: \"us-east4-gcp\" setx MEMORY_BACKEND \"pinecone\" For macOS and Linux users: export PINECONE_API_KEY=\"<YOUR_PINECONE_API_KEY>\" export PINECONE_ENV=\"<YOUR_PINECONE_REGION>\" # e.g: \"us-east4-gcp\" export MEMORY_BACKEND=\"pinecone\"","title":"\ud83c\udf32 Pinecone API Key Setup"},{"location":"configuration/memory/#milvus-setup","text":"Milvus is an open-source, highly scalable vector database to store huge amounts of vector-based memory and provide fast relevant search. And it can be quickly deployed by docker locally or as a cloud service provided by Zilliz Cloud . Deploy your Milvus service, either locally using docker or with a managed Zilliz Cloud database. Install and deploy Milvus locally Set up a managed Zilliz Cloud database (click to expand) Go to Zilliz Cloud and sign up if you don't already have account. In the Databases tab, create a new database. Remember your username and password Wait until the database status is changed to RUNNING. In the Database detail tab of the database you have created, the public cloud endpoint, such as: https://xxx-xxxx.xxxx.xxxx.zillizcloud.com:443 . Run pip3 install pymilvus to install the required client library. Make sure your PyMilvus version and Milvus version are compatible to avoid issues. See also the PyMilvus installation instructions . Update .env MEMORY_BACKEND=milvus One of: MILVUS_ADDR=host:ip (for local instance) MILVUS_ADDR=https://xxx-xxxx.xxxx.xxxx.zillizcloud.com:443 (for Zilliz Cloud) The following settings are optional : - Set MILVUS_USERNAME='username-of-your-milvus-instance' - Set MILVUS_PASSWORD='password-of-your-milvus-instance' - Set MILVUS_SECURE=True to use a secure connection. Only use if your Milvus instance has TLS enabled. Setting MILVUS_ADDR to a https:// URL will override this setting. - Set MILVUS_COLLECTION if you want to change the collection name to use in Milvus. Defaults to autogpt .","title":"Milvus Setup"},{"location":"configuration/memory/#weaviate-setup","text":"Weaviate is an open-source vector database. It allows to store data objects and vector embeddings from ML-models and scales seamlessly to billion of data objects. An instance of Weaviate can be created locally (using Docker), on Kubernetes or using Weaviate Cloud Services . Although still experimental, Embedded Weaviate is supported which allows the Auto-GPT process itself to start a Weaviate instance. To enable it, set USE_WEAVIATE_EMBEDDED to True and make sure you pip install \"weaviate-client>=3.15.4\" .","title":"Weaviate Setup"},{"location":"configuration/memory/#install-the-weaviate-client","text":"Install the Weaviate client before usage. $ pip install weaviate-client","title":"Install the Weaviate client"},{"location":"configuration/memory/#setting-up-environment-variables","text":"In your .env file set the following: MEMORY_BACKEND=weaviate WEAVIATE_HOST=\"127.0.0.1\" # the IP or domain of the running Weaviate instance WEAVIATE_PORT=\"8080\" WEAVIATE_PROTOCOL=\"http\" WEAVIATE_USERNAME=\"your username\" WEAVIATE_PASSWORD=\"your password\" WEAVIATE_API_KEY=\"your weaviate API key if you have one\" WEAVIATE_EMBEDDED_PATH=\"/home/me/.local/share/weaviate\" # this is optional and indicates where the data should be persisted when running an embedded instance USE_WEAVIATE_EMBEDDED=False # set to True to run Embedded Weaviate MEMORY_INDEX=\"Autogpt\" # name of the index to create for the application","title":"Setting up environment variables"},{"location":"configuration/memory/#view-memory-usage","text":"View memory usage by using the --debug flag :)","title":"View Memory Usage"},{"location":"configuration/memory/#memory-pre-seeding","text":"Memory pre-seeding allows you to ingest files into memory and pre-seed it before running Auto-GPT. # python data_ingestion.py -h usage: data_ingestion.py [-h] (--file FILE | --dir DIR) [--init] [--overlap OVERLAP] [--max_length MAX_LENGTH] Ingest a file or a directory with multiple files into memory. Make sure to set your .env before running this script. options: -h, --help show this help message and exit --file FILE The file to ingest. --dir DIR The directory containing the files to ingest. --init Init the memory and wipe its content (default: False) --overlap OVERLAP The overlap size between chunks when ingesting files (default: 200) --max_length MAX_LENGTH The max_length of each chunk when ingesting files (default: 4000) # python data_ingestion.py --dir DataFolder --init --overlap 100 --max_length 2000 In the example above, the script initializes the memory, ingests all files within the Auto-Gpt/autogpt/auto_gpt_workspace/DataFolder directory into memory with an overlap between chunks of 100 and a maximum length of each chunk of 2000. Note that you can also use the --file argument to ingest a single file into memory and that data_ingestion.py will only ingest files within the /auto_gpt_workspace directory. The DIR path is relative to the auto_gpt_workspace directory, so python data_ingestion.py --dir . --init will ingest everything in auto_gpt_workspace directory. You can adjust the max_length and overlap parameters to fine-tune the way the documents are presented to the AI when it \"recall\" that memory: - Adjusting the overlap value allows the AI to access more contextual information from each chunk when recalling information, but will result in more chunks being created and therefore increase memory backend usage and OpenAI API requests. - Reducing the max_length value will create more chunks, which can save prompt tokens by allowing for more message history in the context, but will also increase the number of chunks. - Increasing the max_length value will provide the AI with more contextual information from each chunk, reducing the number of chunks created and saving on OpenAI API requests. However, this may also use more prompt tokens and decrease the overall context available to the AI. Memory pre-seeding is a technique for improving AI accuracy by ingesting relevant data into its memory. Chunks of data are split and added to memory, allowing the AI to access them quickly and generate more accurate responses. It's useful for large datasets or when specific information needs to be accessed quickly. Examples include ingesting API or GitHub documentation before running Auto-GPT. \u26a0\ufe0f If you use Redis as your memory, make sure to run Auto-GPT with the WIPE_REDIS_ON_START=False in your .env file. \u26a0\ufe0fFor other memory backends, we currently forcefully wipe the memory when starting Auto-GPT. To ingest data with those memory backends, you can call the data_ingestion.py script anytime during an Auto-GPT run. Memories will be available to the AI immediately as they are ingested, even if ingested while Auto-GPT is running.","title":"\ud83e\udde0 Memory pre-seeding"},{"location":"configuration/search/","text":"\ud83d\udd0d Google API Keys Configuration Note: This section is optional. use the official google api if you are having issues with error 429 when running a google search. To use the google_official_search command, you need to set up your Google API keys in your environment variables. Create your project: 1. Go to the Google Cloud Console . 2. If you don't already have an account, create one and log in. 3. Create a new project by clicking on the \"Select a Project\" dropdown at the top of the page and clicking \"New Project\". 4. Give it a name and click \"Create\". Set up a custom search API and add to your .env file: 5. Go to the APIs & Services Dashboard . 6. Click \"Enable APIs and Services\". 7. Search for \"Custom Search API\" and click on it. 8. Click \"Enable\". 9. Go to the Credentials page. 10. Click \"Create Credentials\". 11. Choose \"API Key\". 12. Copy the API key. 13. Set it as an environment variable named GOOGLE_API_KEY on your machine (see how to set up environment variables below). 14. Enable the Custom Search API on your project. (Might need to wait few minutes to propagate) Set up a custom search engine and add to your .env file: 15. Go to the Custom Search Engine page. 16. Click \"Add\". 17. Set up your search engine by following the prompts. You can choose to search the entire web or specific sites. 18. Once you've created your search engine, click on \"Control Panel\". 19. Click \"Basics\". 20. Copy the \"Search engine ID\". 21. Set it as an environment variable named CUSTOM_SEARCH_ENGINE_ID on your machine (see how to set up environment variables below). Remember that your free daily custom search quota allows only up to 100 searches. To increase this limit, you need to assign a billing account to the project to profit from up to 10K daily searches. Setting up environment variables For Windows Users: setx GOOGLE_API_KEY \"YOUR_GOOGLE_API_KEY\" setx CUSTOM_SEARCH_ENGINE_ID \"YOUR_CUSTOM_SEARCH_ENGINE_ID\" For macOS and Linux users: export GOOGLE_API_KEY=\"YOUR_GOOGLE_API_KEY\" export CUSTOM_SEARCH_ENGINE_ID=\"YOUR_CUSTOM_SEARCH_ENGINE_ID\"","title":"Search"},{"location":"configuration/search/#google-api-keys-configuration","text":"Note: This section is optional. use the official google api if you are having issues with error 429 when running a google search. To use the google_official_search command, you need to set up your Google API keys in your environment variables. Create your project: 1. Go to the Google Cloud Console . 2. If you don't already have an account, create one and log in. 3. Create a new project by clicking on the \"Select a Project\" dropdown at the top of the page and clicking \"New Project\". 4. Give it a name and click \"Create\". Set up a custom search API and add to your .env file: 5. Go to the APIs & Services Dashboard . 6. Click \"Enable APIs and Services\". 7. Search for \"Custom Search API\" and click on it. 8. Click \"Enable\". 9. Go to the Credentials page. 10. Click \"Create Credentials\". 11. Choose \"API Key\". 12. Copy the API key. 13. Set it as an environment variable named GOOGLE_API_KEY on your machine (see how to set up environment variables below). 14. Enable the Custom Search API on your project. (Might need to wait few minutes to propagate) Set up a custom search engine and add to your .env file: 15. Go to the Custom Search Engine page. 16. Click \"Add\". 17. Set up your search engine by following the prompts. You can choose to search the entire web or specific sites. 18. Once you've created your search engine, click on \"Control Panel\". 19. Click \"Basics\". 20. Copy the \"Search engine ID\". 21. Set it as an environment variable named CUSTOM_SEARCH_ENGINE_ID on your machine (see how to set up environment variables below). Remember that your free daily custom search quota allows only up to 100 searches. To increase this limit, you need to assign a billing account to the project to profit from up to 10K daily searches.","title":"\ud83d\udd0d Google API Keys Configuration"},{"location":"configuration/search/#setting-up-environment-variables","text":"For Windows Users: setx GOOGLE_API_KEY \"YOUR_GOOGLE_API_KEY\" setx CUSTOM_SEARCH_ENGINE_ID \"YOUR_CUSTOM_SEARCH_ENGINE_ID\" For macOS and Linux users: export GOOGLE_API_KEY=\"YOUR_GOOGLE_API_KEY\" export CUSTOM_SEARCH_ENGINE_ID=\"YOUR_CUSTOM_SEARCH_ENGINE_ID\"","title":"Setting up environment variables"},{"location":"configuration/voice/","text":"Voice Enter this command to use TTS (Text-to-Speech) for Auto-GPT python -m autogpt --speak Eleven Labs provides voice technologies such as voice design, speech synthesis, and premade voices that Auto-GPT can use for speech. Go to Eleven Labs and make an account if you don't already have one. Choose and setup the Starter plan. Click the top right icon and find \"Profile\" to locate your API Key. In the .env file set: - ELEVENLABS_API_KEY - ELEVENLABS_VOICE_1_ID (example: \"premade/Adam\" ) List of IDs with names from eleven labs. You can use the name or ID: Rachel : 21m00Tcm4TlvDq8ikWAM Domi : AZnzlk1XvdvUeBnXmlld Bella : EXAVITQu4vr4xnSDxMaL Antoni : ErXwobaYiN019PkySvjV Elli : MF3mGyEYCl7XYWbV9V6O Josh : TxGEqnHWrfWFTfGW9XjX Arnold : VR6AewLTigWG4xSOukaG Adam : pNInz6obpgDQGcFmaJgB Sam : yoZ06aMxZJJ28mfd3POQ","title":"Voice"},{"location":"configuration/voice/#voice","text":"Enter this command to use TTS (Text-to-Speech) for Auto-GPT python -m autogpt --speak Eleven Labs provides voice technologies such as voice design, speech synthesis, and premade voices that Auto-GPT can use for speech. Go to Eleven Labs and make an account if you don't already have one. Choose and setup the Starter plan. Click the top right icon and find \"Profile\" to locate your API Key. In the .env file set: - ELEVENLABS_API_KEY - ELEVENLABS_VOICE_1_ID (example: \"premade/Adam\" )","title":"Voice"},{"location":"configuration/voice/#list-of-ids-with-names-from-eleven-labs-you-can-use-the-name-or-id","text":"Rachel : 21m00Tcm4TlvDq8ikWAM Domi : AZnzlk1XvdvUeBnXmlld Bella : EXAVITQu4vr4xnSDxMaL Antoni : ErXwobaYiN019PkySvjV Elli : MF3mGyEYCl7XYWbV9V6O Josh : TxGEqnHWrfWFTfGW9XjX Arnold : VR6AewLTigWG4xSOukaG Adam : pNInz6obpgDQGcFmaJgB Sam : yoZ06aMxZJJ28mfd3POQ","title":"List of IDs with names from eleven labs. You can use the name or ID:"}]}